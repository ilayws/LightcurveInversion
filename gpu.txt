
typedef struct {
    float distance;
    float incidence_angle;
} hitInfo;

float dotf(float *a, float *b) {
    float c = 0.0f;
    for (int i=0; i<3; i++) {
        c += a[i]*b[i];
    }
    return c;
}

float dotg(__global float *a, __global float *b) {
    float c = 0.0f;
    for (int i=0; i<3; i++) {
        c += a[i]*b[i];
    }
    return c;
}

float crossf(float *a, float *b) {
    float c[3];
    c[0] = a[1]*b[2]-a[2]*b[1];
    c[1] = a[2]*b[0]-a[0]*b[2];
    c[2] = a[0]*b[1]-a[1]*b[0];
    return sqrt(dotf(&c[0],&c[0]));
}

bool isZero(float x, float prec) {
    float a = x;
    if (x<0) {a *= -1.;}
    return a<prec;
}



__kernel void _render(int nsurf, __global float *campos, __global float *lightdir, __global float *s, __global float *n, __global float *rayDir, __global float *L) {
    int gid = get_global_id(0);
    hitInfo closestIntersect;
    closestIntersect.distance = 100.;
    closestIntersect.incidence_angle = 0.;
    for (int i=0; i<nsurf; i++) {
        float l = dotg(lightdir, &n[3*i]);
        if (l < 0) {continue;}
        if (-dotg(&rayDir[3*gid], &n[3*i]) < 0) {continue;}
        float dmo = 0;
        float dme = 0;
        for (int x=0; x<3; x++) {
            dmo += (s[9*i+x]-campos[x])*n[3*i+x];
            dme += rayDir[3*gid+x]*n[3*i+x];
        }
        float d = dmo/dme;
        float p[3];
        float v1[3]; float v2[3]; float v3[3];
        float V1[3]; float V2[3];
        for (int x=0; x<3; x++) {
            p[x] = campos[x] + d*rayDir[3*gid+x];
            v1[x] = s[9*i+x]-p[x];
            v2[x] = s[9*i+3+x]-p[x];
            v3[x] = s[9*i+6+x]-p[x];
            V1[x] = s[9*i+3+x]-s[9*i+x];
            V2[x] = s[9*i+6+x]-s[9*i+x];
        }
        float areadiff = crossf(&V1[0],&V2[0])-crossf(&v1[0],&v2[0])-crossf(&v2[0],&v3[0])-crossf(&v1[0],&v3[0]);
        if (isZero(areadiff, 0.00001) && d < closestIntersect.distance) {
            closestIntersect.distance = d;
            closestIntersect.incidence_angle = l;
        }
    }
    L[gid] = closestIntersect.incidence_angle;
}
